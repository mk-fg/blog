FIDO2 hardware password/secret management
#########################################

:date: 2023-01-04 05:06
:tags: encryption, tools, emacs, hardware


Passwords are bad, and they leak, but services are slow to adopt other auth
methods - even TOTP_ is better, and even for 1-factor-auth (e.g using oathtool_).

But even without passwords, there are plenty of other easy-to-forget secrets to
store in a big pile somewhere, like same TOTP seed values, API keys,
government ID numbers, card PINs and financial info, security answers,
encryption passphrases, and many other stuff.


- Easiest thing is to dump all these into a big .txt file somewhere.

  **Problem**: any malware, accidental or deliberate copy ("evil maid"),
  or even a screen-scrape taken at an unfortunate time exposes everything!

  And these all seem to be reasonably common threats/issues.


- Next best thing - store that file in some encrypted form.

  Even short-lived compromise can get the whole list along with the key from
  memory, and otherwise it's still reasonably easy to leak both key/passphrase
  and ciphertext over time separately, esp.  with long-lived keys.

  It's also all on-screen when opened, can be exposed/scraped from there,
  but still an improvement over pure plaintext, at the expense of some added
  key-management hassle.


- Encrypt whole file, but also have every actual secret in there encrypted
  separately, with unique key for each one::

    banks:

      Apex Finance:
        url: online.apex-finance.com
        login: jmastodon
        pw: fhd.eop0.aE6H/VZc36ZPM5w+jMmI
        email: reg.apexfinance.vwuk@jmastodon.me

        current visa card:
          name: JOHN MASTODON
          no: 4012888888881881
          cvv2: fhd.KCaP.QHai
          expires: 01/28
          pin: fhd.y6En.tVMHWW+C

      Team Overdraft: ...

    google account:
      -- note: FIDO2 2FA required --
      login/email: j.x.mastodon789@gmail.com
      pw: fhd.PNgg.HdKpOLE2b3DejycUGQO35RrtiA==
      recovery email: reg.google.ce21@jmastodon.me
      API private key: fhd.pxdw.QOQrvLsCcLR1X275/Pn6LBWl72uwbXoo/YiY

    ...

  In this case, even relatively long-lived malware/compromise can only sniff
  secrets that were used during that time, and it's mostly fine if this ends up
  being opened and scrolled-through on a public video stream or some app screencaps
  it by accident (or not) - all important secrets are in encrypted "fhd.XXX.YYY" form.

  Downside of course is even more key management burden here, since simply storing
  all these unique keys in a config file or a list won't do, as it'll end up being
  equivalent to "encrypted file + key" case against leaks or machine compromise.


- Storing encryption keys defeats the purpose of the whole thing, typing them
  is insecure vs various keyloggers, and there's also way too many to remember!

  .. html::

    <img
      style="width: 10rem; float: right;"
      src="{static}images/fido2-nfc-keychain.png"
      title="FIDO2 USB token on a keychain"
      alt="FIDO2 USB token on a keychain">
    </a>

  **Solution**: get some cheap FIDO2 hardware key to do all key-management
  for you, and then just keep it physically secure, i.e. put it on the keychain.

  This does not require remembering anything (except maybe a single PIN, if you
  set one, and can remember it reliably within 8 attempts), is reasonably safe
  against all common digital threats, and pretty much as secure against physical
  ones as anything can be (assuming `rubber-hose cryptoanalysis`_ works uniformly
  well), if not more secure (e.g. permanent PIN attempts lockout).

----------

Given the recent push for FIDO2 WebAuthn-compatible passkeys_ by major megacorps
(Google/Apple/MS), and that you'd probably want to have such FIDO2 token for
`SSH keys`_ and `simple+secure full disk encryption`_ anyway, there seems to be
no good reason not to use it for securing passwords as well, in a much better way
than with any memorized or stored-in-a-file schemes for secrets/keys, as outlined above.

There's no go-to way to do this yet (afaik), but all tools to implement it exist.

Filippo Valsorda described one way to do it via plugin for a common "`age`_"
encryption tool in `"My age+YubiKeys Password Management Solution" blog post`_,
using Yubikey-specific PIV-smartcard capability (present in some of Yubico tokens),
and a shell script to create separate per-service encrypted files.

I did it a bit differently, with secrets stored alongside non-secret notes and
other info/metadata, and with a common FIDO2-standard `hmac-secret extension`_
(supported by pretty much all such devices, I think?), used in the following way:

- Store ciphertext as a "fhd.y6En.tVMHWW+C" string, which is::

    "fhd." || base64(salt) || "." || base64(wrapped-secret)

  And keep those in the common list of various important info (also encrypted),
  to view/edit with the usual emacs.

- When specific secret or password is needed, point to it and press "copy
  decrypted" hotkey (as implemented by `fhd-crypt in my emacs`_).

- Parsing that "fhd. ..." string gets "y6En" salt value, and it is sent to USB/NFC
  token in the assertion operation (same as `fido2-assert cli tool`_ runs).

- Hardware token user-presence/verification requires you to physically touch
  button on the device (or drop it onto NFC pad), and maybe also enter a PIN
  or pass whatever biometric check, depending on device and its configuration
  (see `fido2-token tool`_ for that).

- Token/device returns "hmac-sha256(salt, key=secret-generated-on-device)",
  unique and unguessable for that salt value, which is then used to decrypt
  "tVMHWW+C" part of the fhd-string into original "secret" string (via simple XOR).

- Resulting "secret" value is copied into clipboard, to use wherever it was needed.

This ensures that every single secret string in such password-list is only
decryptable separately, also demanding a separate physical verification procedure,
very visible and difficult to do unintentionally, same as with WebAuthn_.

Only actual secret key in this case resides on a FIDO2 device, and is infeasible
to extract from there, for any common threat model at least.

Encryption/wrapping of secret-string to fhd-string above works in roughly same
way - generate salt value, send to token, get back HMAC and XOR it with the secret,
cutting result down to that secret-string length.

Last part introduces a small info-leak - secret length - but don't think
that should be an issue in practice (always use long random passwords),
while producing nicer short ciphertexts.

There are also still some issues with using these physical dongles in a compomised
environment, which can lie about what it is being authorized by a device,
as they usually have no way to display that, but it's still a big improvement,
and can be somewhat mitigated by using multiple tokens for different purposes.

----------

I've wrapped all these crypto bits into a simple C fido2-hmac-desalinate tool here:

  https://github.com/mk-fg/fgtk#hdr-fido2-hmac-desalinate.c

Which needs "Relying Party ID" value to compile - basically an unique hostname
that ideally won't be used for anything else with that authenticator
(e.g. "token1.fhd.jmastodon.me" for some owned domain name), which is itself
not a secret of any kind.

FIDO2 "credential" can be generated and stored on device first, using cli tools
that come with libfido2, for example::

  % fido2-token -L
  % fido2-cred -M -rh -i cred.req.txt -o cred.info.txt /dev/hidraw5 eddsa

Such credential would work well on different machines with authenticators that
support FIDO2 Discoverable Credentials (aka Resident Keys), with HMAC key stored
on the same portable authenticator, but for simpler tokens that don't support
that and have no storage, static credential-id value (returned by `fido2-cred tool`_
without "-r" option) also needs to be built-in via -DFHD_CID= compile-time parameter
(and is also not a secret).

  (technically that last "credential-id value" has device-master-key-wrapped
  HMAC-key in it, but it's only possible to extract from there by the device
  itself, and it's never passed or exposed anywhere in plaintext at any point)

On the User Interface side, I use Emacs_ text editor to open/edit password-list
(also `transparently-encrypted/decrypted`_ using `ghg tool`_), and get encrypted
stuff from it just by pointing at the needed secret and pushing the hotkey to
copy its decrypted value, implemented by fhd-crypt routine here:

  https://github.com/mk-fg/emacs-setup/blob/21479cc/core/fg_sec.el#L178-L281

(also, with universal-arg, fhd-crypt encrypts/decrypts and replaces pointed-at
or region-selected thing in-place, instead of copying into clipboard)

Separate binary built against common libfido2_ ensures that it's easy to use
such secret strings in any other way too, or fallback to manually decoding them
via cli, if necessary.

At least until push for passkeys makes no-password WebAuthn ubiquitous enough,
this seem to be the most convenient and secure way of password management for me,
but auth passwords aren't the only secrets, so it likely will be useful way
beyond that point as well.

----------

One thing not mentioned above are (important!) backups for that secret-file.
I.e. what if FIDO2 token in question gets broken or lost?
And how to keep such backup up-to-date?

My initial simple fix is having a shell script that does basically this:

.. code-block:: bash

  #!/bin/bash
  set -eo pipefail
  echo "### Paste new entry, ^D after last line to end, ^C to cancel"
  echo "### Make sure to include some context for it - headers at least"
  chunk=$(ghg -eo -r some-public-key | base64 -w80)
  echo -e "--- entry [ $(date -Is) ]\n${chunk}\n--- end\n" >>backup.log

Then on any updates, to run this script and paste the updated plaintext
secret-block into it, before encrypting all secrets in that block for good.

It does one-way public-key encryption (using ghg_ tool, but common age_ or
GnuPG_ will work just as well), to store those encrypted updates, which can then
be safely backed-up alongside the main (also encrypted) list of secrets,
and everything can be restored from these using corresponding secure private key
(ideally not exposed or used anywhere for anything outside of such
fallback-recovery purposes).

**Update 2024-02-21:** `secret-token-backup`_ wrapper/tool is a more modern
replacement for that, which backs stuff up automatically, and can also be used
for safely getting specific secret out of there using other PIV yubikeys
(e.g. YK Nano stuck in a laptop's USB slot).

.. _secret-token-backup: https://github.com/mk-fg/fgtk#hdr-secret-token-backup

----------

And one more aside - since plugging devices into USB rarely aligns correctly
on the first try (USB curse), is somewhat tedious, and can potentially wear-out
contacts or snap-off the device, I've grabbed a cheap PC/SC-compatible ACR122U
NFC reader from aliexpress, and have been using it instead of a USB interface,
as modern FIDO2 tokens tend to support NFC for use with smartphones.

It works great for this password-management purpose, placing the key on NFC
pad works instead of the touch presence-check with USB (at least with cheap
Yubico Security Key devices), with some short (<1 minute) timeout on the pad
in which token stops responding with ERR_PIN, to avoid misuse if one forgets
to remove it.

libfido2_ supports PC/SC interface, and `PCSC lite project`_ providing it on
typical linux distros seem to support pretty much all NFC readers in existance.

libfido2 is in turn used by systemd_, OpenSSH_, pam-u2f_, its fido2-token/cred/assert
cli, my fido2-hmac-desalinate password-management hack above, and many other tools.
So through it, all these projects automatically have easy and ubiquitous NFC support too.

  (libfido2 also supports linux kernel AF_NFC interface in addition to PC/SC
  one, which works for much narrower selection of card-readers implemented by
  in-kernel drivers, so PC/SC might be easier to use, but kernel interface
  doesn't need an extra pcscd dependency, if works for your specific reader)

Notable things that don't use that lib and have issues with NFC seem to be
browsers - both Firefox and Chromium on desktop (and their forks, see e.g.
`mozbug-1669870`_) - which is a shame, but hopefully will be fixed there eventually.


.. _TOTP: https://en.wikipedia.org/wiki/Time-based_one-time_password
.. _oathtool: https://www.nongnu.org/oath-toolkit/oathtool.1.html
.. _rubber-hose cryptoanalysis: https://en.wikipedia.org/wiki/Rubber-hose_cryptanalysis
.. _passkeys: https://www.passkeys.io/
.. _SSH keys: https://github.blog/2021-05-10-security-keys-supported-ssh-git-operations/
.. _simple+secure full disk encryption:
  https://0pointer.net/blog/unlocking-luks2-volumes-with-tpm2-fido2-pkcs11-security-hardware-on-systemd-248.html
.. _"My age+YubiKeys Password Management Solution" blog post:
  https://words.filippo.io/dispatches/passage/
.. _hmac-secret extension:
  https://fidoalliance.org/specs/fido2/fido-client-to-authenticator-protocol-v2.1-rd-20191217.html#sctn-hmac-secret-extension
.. _fhd-crypt in my emacs: https://github.com/mk-fg/emacs-setup/blob/21479cc/core/fg_sec.el#L178-L240
.. _fido2-assert cli tool: https://developers.yubico.com/libfido2/Manuals/fido2-assert.html
.. _fido2-token tool: https://developers.yubico.com/libfido2/Manuals/fido2-token.html
.. _WebAuthn: https://webauthn.guide/
.. _fido2-cred tool: https://developers.yubico.com/libfido2/Manuals/fido2-cred.html
.. _emacs: https://www.gnu.org/software/emacs/
.. _transparently-encrypted/decrypted:
  /2015/12/09/transparent-bufferfile-processing-in-emacs-on-loadsavewhatever-io-ops.html
.. _ghg tool: https://github.com/mk-fg/ghg
.. _libfido2: https://github.com/Yubico/libfido2
.. _ghg: https://github.com/mk-fg/ghg
.. _age: https://github.com/FiloSottile/age
.. _GnuPG: https://gnupg.org/
.. _PCSC lite project: https://pcsclite.apdu.fr/
.. _systemd: https://systemd.io/
.. _OpenSSH: https://www.openssh.com/
.. _pam-u2f: https://developers.yubico.com/pam-u2f/
.. _mozbug-1669870: https://bugzilla.mozilla.org/show_bug.cgi?id=1669870
